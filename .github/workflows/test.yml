name: Test

on:
    push:
        branches:
            - "develop"
    pull_request:
        types: [ready_for_review, synchronize, opened]

jobs:
    unit:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [12.x]

        steps:
            - uses: actions/checkout@v2
            - name: Cache node modules
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: ${{ runner.os }}-node-
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Setup Redis
              uses: zhulik/redis-action@1.1.0
            - name: Install & Build
              run: yarn setup
            - name: Test
              run: yarn test:unit:coverage --coverageDirectory .coverage/unit/ --maxWorkers=2
            - name: Codecov
              run: ./node_modules/.bin/codecov --token=${{ secrets.CODECOV_TOKEN }}

    staking:
      runs-on: ubuntu-latest

      strategy:
          matrix:
              node-version: [12.x]

      steps:
          - uses: actions/checkout@v2
          - name: Cache node modules
            uses: actions/cache@v1
            with:
                path: node_modules
                key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
                restore-keys: ${{ runner.os }}-node-
          - name: Use Node.js ${{ matrix.node-version }}
            uses: actions/setup-node@v1
            with:
                node-version: ${{ matrix.node-version }}
          - name: Setup Redis
            uses: zhulik/redis-action@1.1.0
          - name: Install & Build
            run: yarn setup
          - name: Test
            run: yarn test plugins/stake-transactions/__tests__/staking.unit.test.ts

    integration:
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:10.8
                env:
                    POSTGRES_USER: ark
                    POSTGRES_PASSWORD: password
                    POSTGRES_DB: nos_unitnet
                ports:
                    - 5432:5432
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

        strategy:
            matrix:
                node-version: [12.x]

        steps:
            - uses: actions/checkout@v2
            - name: Cache node modules
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: ${{ runner.os }}-node-
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Update system
              run: sudo apt-get update -y
            - name: Install xsel & postgresql-client
              run: sudo apt-get install -q xsel postgresql-client
            - name: Setup Redis
              uses: zhulik/redis-action@1.1.0
            - name: Install and build packages
              run: yarn setup
            - name: Create .core/database directory
              run: mkdir -p $HOME/.core/database
            - name: Integration tests
              run: yarn test:integration:coverage --coverageDirectory .coverage/integration/
              env:
                  CORE_DB_DATABASE: nos_unitnet
                  CORE_DB_USERNAME: ark
                  POSTGRES_USER: ark
                  POSTGRES_PASSWORD: password
                  POSTGRES_DB: nos_unitnet
            - name: Codecov
              run: ./node_modules/.bin/codecov --token=${{ secrets.CODECOV_TOKEN }}